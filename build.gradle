/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'masanori' at '16/01/27 19:04' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

plugins {
      id "com.jfrog.bintray" version "1.4"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "findbugs"
apply plugin: "pmd"
apply plugin: "jacoco"


// default encoding
def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

// project
sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'com.mychaelstyle'
archivesBaseName = 'java-juman-knp' 
version = '0.2.0'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
        url "file:"+System.getenv("HOME") + "/repositories/dev"
        url "http://www.atilika.org/nexus/content/repositories/atilika"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.4'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

// publish archive
uploadArchives {
  repositories {
    mavenDeployer {
      file(System.getenv('HOME') + '/repositories/dev').mkdirs()
      repository(url: 'file:' + System.getenv('HOME') + '/repositories/dev')
    }
  }
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Fuman Java Lib', 'Implementation-Version': 0.1
  }
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

findbugs {
  ignoreFailures = true
  toolVersion = "3.0.1"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = "max"
  //  reportLevel = "high"
  //  visitors = ["FindSqlInjection", "SwitchFallthrough"]
  //  omitVisitors = ["FindNonShortCircuit"]
  //  includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
  //  excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

check << {
  File outDir = new File('build/reports/pmd/')
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask', classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml', outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: "src/main/java") {
      include(name: '**/*.java')
    }
  }
}

publishing {
  publications {
    MyPublication(MavenPublication) {
      from components.java
      groupId 'com.mychaelstyle'
      artifactId 'java-juman-knp'
      version '0.2.0'
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')

  configurations = ['archives']
  publications = ['MyPublication']

  dryRun = false
  publish = true

  pkg {
    repo = 'maven'
    name = 'java-juman-knp'
    userOrg = ''
    desc = 'NLP juman, knp wrapper'
    licenses = ['Apache-2.0']
    vcsUrl = 'git@github.com:mychaelstyle/java-juman-knp.git'
    websiteUrl = 'https://github.com/mychaelstyle/java-juman-knp'
    issueTrackerUrl = 'https://github.com/mychaelstyle/java-juman-knp/issues'
    
    publicDownloadNumbers = true

    version {
      name = '0.2.0'
      desc = 'Java wrapper for JUMAN,KNP 0.1.0 final'
      vcsTag = '0.1.0'
    }
  }
}


